==>Model:
DataParallel(
  (module): PVCNN2(
    (sa_layers): ModuleList(
      (0): Sequential(
        (0): PVConv(
          (voxelization): Voxelization(resolution=32, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(10, 8, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(8, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(8, 8, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(8, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=8, out_features=1, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=1, out_features=8, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(10, 8, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (1): PVConv(
          (voxelization): Voxelization(resolution=32, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(8, 8, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(8, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(8, 8, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(8, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=8, out_features=1, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=1, out_features=8, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(8, 8, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (2): PointNetSAModule(
          num_centers=1024, out_channels=16
          (groupers): ModuleList(
            (0): BallQuery(radius=0.1, num_neighbors=32, include coordinates)
          )
          (mlps): ModuleList(
            (0): SharedMLP(
              (layers): Sequential(
                (0): Conv2d(11, 8, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1))
                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
      )
      (1): Sequential(
        (0): PVConv(
          (voxelization): Voxelization(resolution=16, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=16, out_features=2, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=2, out_features=16, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(16, 16, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (1): PVConv(
          (voxelization): Voxelization(resolution=16, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=16, out_features=2, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=2, out_features=16, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(16, 16, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (2): PVConv(
          (voxelization): Voxelization(resolution=16, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=16, out_features=2, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=2, out_features=16, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(16, 16, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (3): PointNetSAModule(
          num_centers=256, out_channels=32
          (groupers): ModuleList(
            (0): BallQuery(radius=0.2, num_neighbors=32, include coordinates)
          )
          (mlps): ModuleList(
            (0): SharedMLP(
              (layers): Sequential(
                (0): Conv2d(19, 16, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
      )
      (2): Sequential(
        (0): PVConv(
          (voxelization): Voxelization(resolution=8, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=32, out_features=4, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=4, out_features=32, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (1): PVConv(
          (voxelization): Voxelization(resolution=8, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=32, out_features=4, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=4, out_features=32, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (2): PVConv(
          (voxelization): Voxelization(resolution=8, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=32, out_features=4, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=4, out_features=32, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (3): PointNetSAModule(
          num_centers=64, out_channels=64
          (groupers): ModuleList(
            (0): BallQuery(radius=0.4, num_neighbors=32, include coordinates)
          )
          (mlps): ModuleList(
            (0): SharedMLP(
              (layers): Sequential(
                (0): Conv2d(35, 32, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
      )
      (3): PointNetSAModule(
        num_centers=16, out_channels=128
        (groupers): ModuleList(
          (0): BallQuery(radius=0.8, num_neighbors=32, include coordinates)
        )
        (mlps): ModuleList(
          (0): SharedMLP(
            (layers): Sequential(
              (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
              (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
              (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
              (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU(inplace=True)
            )
          )
        )
      )
    )
    (fp_layers): ModuleList(
      (0): Sequential(
        (0): PointNetFPModule(
          (mlp): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(192, 64, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
          )
        )
        (1): PVConv(
          (voxelization): Voxelization(resolution=8, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=64, out_features=8, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=8, out_features=64, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
      (1): Sequential(
        (0): PointNetFPModule(
          (mlp): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(96, 64, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
          )
        )
        (1): PVConv(
          (voxelization): Voxelization(resolution=8, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=64, out_features=8, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=8, out_features=64, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
      (2): Sequential(
        (0): PointNetFPModule(
          (mlp): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(80, 64, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(64, 32, kernel_size=(1,), stride=(1,))
              (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
          )
        )
        (1): PVConv(
          (voxelization): Voxelization(resolution=16, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=32, out_features=4, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=4, out_features=32, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
        (2): PVConv(
          (voxelization): Voxelization(resolution=16, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=32, out_features=4, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=4, out_features=32, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
      (3): Sequential(
        (0): PointNetFPModule(
          (mlp): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(39, 32, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(32, 32, kernel_size=(1,), stride=(1,))
              (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
              (6): Conv1d(32, 16, kernel_size=(1,), stride=(1,))
              (7): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (8): ReLU(inplace=True)
            )
          )
        )
        (1): PVConv(
          (voxelization): Voxelization(resolution=32, normalized eps = 1e-17)
          (voxel_layers): Sequential(
            (0): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (1): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.1, inplace=True)
            (3): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (4): BatchNorm3d(16, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.1, inplace=True)
            (6): SE3d(
              (fc): Sequential(
                (0): Linear(in_features=16, out_features=2, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=2, out_features=16, bias=False)
                (3): Sigmoid()
              )
            )
          )
          (point_features): SharedMLP(
            (layers): Sequential(
              (0): Conv1d(16, 16, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
    )
    (classifier): Sequential(
      (0): SharedMLP(
        (layers): Sequential(
          (0): Conv1d(16, 32, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (1): Dropout(p=0.5, inplace=False)
      (2): Conv1d(32, 8, kernel_size=(1,), stride=(1,))
    )
  )
)
End model definition
